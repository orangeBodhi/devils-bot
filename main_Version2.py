import logging
import os
from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
)
from db import init_db, add_user, get_user, reset_user, add_pushups, get_pushups_today, next_day

# States
CHOOSING_NAME, CHOOSING_START_TIME, CHOOSING_END_TIME, CHOOSING_REMINDERS = range(4)

# Emojis
DEVIL = "üòà"
CLOVER = "üçÄ"
HEART_RED = "‚ù§Ô∏è"
HEART_BLACK = "üñ§"
STRONG = "üí™"
REMIND = "üîî"
NOTE = "üìù"
CLOCK = "üïí"
TROPHY = "üèÜ"
CHILL = "üßò"

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

init_db()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    user_db = get_user(user.id)
    if user_db:
        await update.message.reply_text(
            f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏ /reset, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    keyboard = [[KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Devil's 100!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
        reply_markup=reply_markup,
    )
    return CHOOSING_NAME

async def choose_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(f"–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? {NOTE}")
    return CHOOSING_START_TIME

async def save_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["name"] = update.message.text
    await update.message.reply_text(
        f"–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ê–°–´:–ú–ò–ù–£–¢–´ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:00), –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å {CLOCK}"
    )
    return CHOOSING_END_TIME

async def save_start_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["start_time"] = update.message.text
    await update.message.reply_text(
        f"–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ê–°–´:–ú–ò–ù–£–¢–´ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00), –∫–æ–≥–¥–∞ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É {CLOCK}"
    )
    return CHOOSING_REMINDERS

async def save_end_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["end_time"] = update.message.text
    await update.message.reply_text(
        f"–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø—Ä–æ –æ—Ç–∂–∏–º–∞–Ω–∏—è? –ú–∏–Ω–∏–º—É–º 2, –º–∞–∫—Å–∏–º—É–º 10 {REMIND}"
    )
    return CHOOSING_REMINDERS

async def save_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        reminders = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–æ—Ç 2 –¥–æ 10)")
        return CHOOSING_REMINDERS
    if reminders < 2 or reminders > 10:
        await update.message.reply_text("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 10")
        return CHOOSING_REMINDERS
    context.user_data["reminders"] = reminders
    user = update.effective_user
    add_user(
        user.id,
        context.user_data["name"],
        context.user_data["start_time"],
        context.user_data["end_time"],
        context.user_data["reminders"]
    )
    await update.message.reply_text(
        f"{DEVIL} –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ Devil's 100 challenge! –°–µ–≥–æ–¥–Ω—è –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —á–µ–ª–ª–µ–Ω–¥–∂–∞, –∞ –∑–Ω–∞—á–∏—Ç —Ç—ã –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–µ 100 –æ—Ç–∂–∏–º–∞–Ω–∏–π! –£–¥–∞—á–∏! {CLOVER}",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if get_user(user.id):
        reset_user(user.id)
        await update.message.reply_text("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã! –ú–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.")
    else:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

async def add10(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await add_pushups_generic(update, context, 10)

async def add15(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await add_pushups_generic(update, context, 15)

async def add20(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await add_pushups_generic(update, context, 20)

async def add25(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await add_pushups_generic(update, context, 25)

async def add_pushups_generic(update, context, count):
    user = update.effective_user
    if not get_user(user.id):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return
    cur = get_pushups_today(user.id)
    if cur >= 100:
        await update.message.reply_text(f"–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Å–æ—Ç–∫—É, –æ—Ç–¥–æ—Ö–Ω–∏! {CHILL}")
        return
    ok = add_pushups(user.id, count)
    if not ok:
        await update.message.reply_text("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 100 –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å!")
        return
    new_count = get_pushups_today(user.id)
    await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ! {count} –æ—Ç–∂–∏–º–∞–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å—É! {TROPHY}\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {new_count}/100")
    if new_count == 100:
        await update.message.reply_text(f"–Æ—Ö—É! —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å–æ—Ç–∫–∞ —Å–¥–µ–ª–∞–Ω–∞! {STRONG} üíØ")

async def add_custom(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –æ—Ç–∂–∏–º–∞–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13):")
    context.user_data["awaiting_custom"] = True

async def handle_custom_pushups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_custom"):
        try:
            count = int(update.message.text)
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return
        await add_pushups_generic(update, context, count)
        context.user_data["awaiting_custom"] = False

def main():
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("üöÄ –ù–∞—á–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂"), choose_name),
        ],
        states={
            CHOOSING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_name)],
            CHOOSING_START_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_start_time)],
            CHOOSING_END_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_end_time)],
            CHOOSING_REMINDERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_reminders)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(CommandHandler("add10", add10))
    application.add_handler(CommandHandler("add15", add15))
    application.add_handler(CommandHandler("add20", add20))
    application.add_handler(CommandHandler("add25", add25))
    application.add_handler(CommandHandler("add", add_custom))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_pushups))

    logger.info("Bot started!")
    application.run_polling()

if __name__ == "__main__":
    main()