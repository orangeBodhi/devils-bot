import logging
import os
from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
)
from db import (
    init_db,
    add_user,
    get_user,
    reset_user,
    add_pushups,
    get_pushups_today,
    next_day,
    fail_day,
    get_fails,
    get_day,
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_NAME, ASK_START_TIME, ASK_END_TIME, ASK_REMINDERS = range(4)

# –≠–º–æ–¥–∑–∏
DEVIL = "üòà"
CLOVER = "üçÄ"
HEART_RED = "‚ù§Ô∏è"
HEART_BLACK = "üñ§"
STRONG = "üí™"
REMIND = "üîî"
NOTE = "üìù"
CLOCK = "üïí"
TROPHY = "üèÜ"
CHILL = "üßò"
SKULL = "üíÄ"
ROAD = "üõ£Ô∏è"

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

init_db()

def progress_bar(val, total, length, char="‚ñá", empty="‚Äî"):
    filled = int(round(length * val / float(total)))
    return char * filled + empty * (length - filled)

def emoji_number(num):
    emoji_digits = {
        '0': '0Ô∏è‚É£', '1': '1Ô∏è‚É£', '2': '2Ô∏è‚É£', '3': '3Ô∏è‚É£', '4': '4Ô∏è‚É£',
        '5': '5Ô∏è‚É£', '6': '6Ô∏è‚É£', '7': '7Ô∏è‚É£', '8': '8Ô∏è‚É£', '9': '9Ô∏è‚É£'
    }
    return ''.join(emoji_digits.get(d, d) for d in str(num))

def hearts(fails):
    return (HEART_RED * (3 - fails)) + (HEART_BLACK * fails)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    user_db = get_user(user.id)
    if user_db:
        await update.message.reply_text(
            f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏ /reset, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    await update.message.reply_text(
        "–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? üìù"
    )
    return ASK_NAME

async def ask_start_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["name"] = update.message.text
    await update.message.reply_text(
        "–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ê–°–´:–ú–ò–ù–£–¢–´ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:00), –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å (–Ω–∞—á–∞–ª–æ –¥–Ω—è) –∏ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –æ—Ç–∂–∏–º–∞–Ω–∏—èüïí"
    )
    return ASK_END_TIME

async def ask_end_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["start_time"] = update.message.text
    await update.message.reply_text(
        "–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ê–°–´:–ú–ò–ù–£–¢–´ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00), –∫–æ–≥–¥–∞ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É (–∫–æ–Ω–µ—Ü –¥–Ω—è) üïí –∏ —Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å"
    )
    return ASK_REMINDERS

async def ask_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["end_time"] = update.message.text
    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø—Ä–æ –æ—Ç–∂–∏–º–∞–Ω–∏—è? –ú–∏–Ω–∏–º—É–º 2, –º–∞–∫—Å–∏–º—É–º 10 üîî"
    )
    return ASK_REMINDERS

async def save_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        reminders = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–æ—Ç 2 –¥–æ 10)")
        return ASK_REMINDERS
    if reminders < 2 or reminders > 10:
        await update.message.reply_text("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 10")
        return ASK_REMINDERS
    context.user_data["reminders"] = reminders
    user = update.effective_user
    add_user(
        user.id,
        context.user_data["name"],
        context.user_data["start_time"],
        context.user_data["end_time"],
        context.user_data["reminders"]
    )
    await update.message.reply_text(
        f"{DEVIL} –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ Devil's 100 challenge! –°–µ–≥–æ–¥–Ω—è –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —á–µ–ª–ª–µ–Ω–¥–∂–∞, –∞ –∑–Ω–∞—á–∏—Ç —Ç—ã –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–µ 100 –æ—Ç–∂–∏–º–∞–Ω–∏–π! –£–¥–∞—á–∏! {CLOVER}",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    # –í—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º —Å–±—Ä–æ—Å, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    reset_user(user.id)
    await update.message.reply_text("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã! –ú–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.")

async def add_pushups_generic(update, context, count):
    user = update.effective_user
    if not get_user(user.id):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return
    cur = get_pushups_today(user.id)
    if cur >= 100:
        await update.message.reply_text(f"–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Å–æ—Ç–∫—É, –æ—Ç–¥–æ—Ö–Ω–∏! {CHILL}")
        return
    ok = add_pushups(user.id, count)
    if not ok:
        await update.message.reply_text("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 100 –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å!")
        return
    new_count = get_pushups_today(user.id)
    await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ! {count} –æ—Ç–∂–∏–º–∞–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å—É! {TROPHY}\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {new_count}/100")
    if new_count == 100:
        await update.message.reply_text(f"–Æ—Ö—É! —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å–æ—Ç–∫–∞ —Å–¥–µ–ª–∞–Ω–∞! {STRONG} üíØ")

async def add10(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await add_pushups_generic(update, context, 10)

async def add15(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await add_pushups_generic(update, context, 15)

async def add20(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await add_pushups_generic(update, context, 20)

async def add25(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await add_pushups_generic(update, context, 25)

async def add_custom(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –æ—Ç–∂–∏–º–∞–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13):")
    context.user_data["awaiting_custom"] = True

async def handle_custom_pushups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_custom"):
        try:
            count = int(update.message.text)
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return
        await add_pushups_generic(update, context, count)
        context.user_data["awaiting_custom"] = False

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    u = get_user(user.id)
    if not u:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return
    day = u["day"]
    fails = u["fails"]
    pushups = u["pushups_today"]
    bar_days = progress_bar(day, 90, 3)
    bar_pushups = progress_bar(pushups, 100, 5)
    msg = (
        f"DAY: {emoji_number(day)}/90 {bar_days}\n"
        f"PROGRESS: {emoji_number(pushups)}/100 {bar_pushups}\n"
        f"HEALTH: {hearts(fails)}\n"
    )
    keyboard = [
        [KeyboardButton("/add10"), KeyboardButton("/add15")],
        [KeyboardButton("/add20"), KeyboardButton("/add25")],
        [KeyboardButton("/add")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(msg, reply_markup=reply_markup)

async def check_end_of_day(user_id, update):
    u = get_user(user_id)
    if u and u["pushups_today"] < 100:
        fails = fail_day(user_id)
        if fails < 3:
            await update.message.reply_text(
                f"–ü–∞-–ø–∞-–ø–∞‚Ä¶ –°–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–µ –æ—Å–∏–ª–∏–ª —Å–æ—Ç–∫—É. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ –º–∏–Ω—É—Å –∂–∏–∑–Ω—å. –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ: {hearts(fails)}"
            )
        else:
            await update.message.reply_text(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –∑–∞—Ñ–µ–π–ª–∏–ª —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑! {SKULL}\n–î–ª—è —Ç–µ–±—è Devil's 100 challenge –∑–∞–∫–æ–Ω—á–µ–Ω‚Ä¶ –≤ —ç—Ç–æ—Ç —Ä–∞–∑!\n–î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏ /reset",
                reply_markup=ReplyKeyboardRemove()
            )

async def addday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    u = get_user(user.id)
    if not u:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return
    if u["pushups_today"] < 100:
        await check_end_of_day(user.id, update)
    else:
        next_day(user.id)
        await update.message.reply_text(
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –º–æ–ª–æ–¥–µ—Ü! –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å–æ—Ç–∫–∞ —Å–¥–µ–ª–∞–Ω–∞, —É–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞! {STRONG}"
        )
    await status(update, context)

def main():
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_start_time)],
            ASK_START_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_end_time)],
            ASK_END_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_reminders)],
            ASK_REMINDERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_reminders)],
        },
        fallbacks=[CommandHandler("start", start), CommandHandler("reset", reset)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("addday", addday))
    application.add_handler(CommandHandler("add10", add10))
    application.add_handler(CommandHandler("add15", add15))
    application.add_handler(CommandHandler("add20", add20))
    application.add_handler(CommandHandler("add25", add25))
    application.add_handler(CommandHandler("add", add_custom))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_pushups))

    logger.info("Bot started!")
    application.run_polling()

if __name__ == "__main__":
    main()
