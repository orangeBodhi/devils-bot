import logging
import os
import re
import asyncio
from datetime import datetime, timedelta, time as dt_time
from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
)
from db import (
    init_db,
    add_user,
    get_user,
    reset_user,
    add_pushups,
    get_pushups_today,
    next_day,
    fail_day,
    get_fails,
    get_day,
    get_all_user_ids,  # <-- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π!
)

ASK_NAME, ASK_START_TIME, ASK_END_TIME, ASK_REMINDERS = range(4)

DEVIL = "üòà"
CLOVER = "üçÄ"
HEART_RED = "‚ù§Ô∏è"
HEART_BLACK = "üñ§"
STRONG = "üí™"
REMIND = "üîî"
NOTE = "üìù"
CLOCK = "üïí"
TROPHY = "üèÜ"
CHILL = "üßò"
SKULL = "üíÄ"
ROAD = "üõ£Ô∏è"
UP = "üìà"

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

init_db()

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ user_id
reminder_tasks = {}

def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üéØ +10 –æ—Ç–∂–∏–º–∞–Ω–∏–π"), KeyboardButton("üéØ +15 –æ—Ç–∂–∏–º–∞–Ω–∏–π")],
        [KeyboardButton("üéØ +20 –æ—Ç–∂–∏–º–∞–Ω–∏–π"), KeyboardButton("üéØ +25 –æ—Ç–∂–∏–º–∞–Ω–∏–π")],
        [KeyboardButton("üé≤ –î—Ä—É–≥–æ–µ —á–∏—Å–ª–æ"), KeyboardButton("üèÖ –ú–æ–π —Å—Ç–∞—Ç—É—Å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def progress_bar(val, total, length=5, char_full="üü©", char_empty="‚¨úÔ∏è"):
    val = max(0, min(val, total))
    filled = int(round(length * val / float(total)))
    empty = length - filled
    percent = int(round(100 * val / float(total)))
    bar = (char_full * filled) + (char_empty * empty)
    return f"{bar} {percent}%"

def days_bar(day, total_days=90, length=5, char_full="üü™", char_empty="‚¨úÔ∏è"):
    day = max(0, min(day, total_days))
    filled = int(round(length * day / float(total_days)))
    empty = length - filled
    percent = int(round(100 * day / float(total_days)))
    bar = (char_full * filled) + (char_empty * empty)
    return f"{bar} {percent}%"

def emoji_number(num):
    emoji_digits = {
        '0': '0Ô∏è‚É£', '1': '1Ô∏è‚É£', '2': '2Ô∏è‚É£', '3': '3Ô∏è‚É£', '4': '4Ô∏è‚É£',
        '5': '5Ô∏è‚É£', '6': '6Ô∏è‚É£', '7': '7Ô∏è‚É£', '8': '8Ô∏è‚É£', '9': '9Ô∏è‚É£'
    }
    return ''.join(emoji_digits.get(d, d) for d in str(num))

def hearts(fails):
    return (HEART_RED * (3 - fails)) + (HEART_BLACK * fails)

def is_valid_time(timestr):
    if not re.match(r"^\d{2}:\d{2}$", timestr):
        return False
    try:
        datetime.strptime(timestr, "%H:%M")
        return True
    except ValueError:
        return False

def time_to_minutes(timestr):
    h, m = map(int, timestr.split(":"))
    return h * 60 + m

def minutes_to_time(mins):
    h = mins // 60
    m = mins % 60
    return dt_time(hour=h, minute=m)

def get_reminder_times(start_time_str, end_time_str, reminders_count):
    """–í–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [datetime.time, ...] —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –º–µ–∂–¥—É —Å—Ç–∞—Ä—Ç–æ–º –∏ –∫–æ–Ω—Ü–æ–º."""
    start_dt = datetime.strptime(start_time_str, "%H:%M")
    end_dt = datetime.strptime(end_time_str, "%H:%M")
    total_minutes = int((end_dt - start_dt).total_seconds() // 60)
    if reminders_count < 2:
        return [start_dt.time()]
    interval = total_minutes / (reminders_count - 1)
    times = []
    for i in range(reminders_count):
        mins = int(round(i * interval))
        t = (start_dt + timedelta(minutes=mins)).time()
        times.append(t)
    return times

async def send_reminders_loop(application, user_id, chat_id):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å: –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –µ—Å–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω."""
    while True:
        u = get_user(user_id)
        if not u:
            return
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        start_time = u["start_time"]
        end_time = u["end_time"]
        reminders_count = u["reminders"]
        times = get_reminder_times(start_time, end_time, reminders_count)

        now = datetime.now()
        today = now.date()
        # –°—á–∏—Ç–∞–µ–º datetime –¥–ª—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        reminder_datetimes = []
        for t in times:
            reminder_dt = datetime.combine(today, t)
            if reminder_dt > now:
                reminder_datetimes.append(reminder_dt)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        for reminder_dt in reminder_datetimes:
            seconds = (reminder_dt - datetime.now()).total_seconds()
            if seconds > 0:
                await asyncio.sleep(seconds)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å (100 —Å–¥–µ–ª–∞–Ω–æ - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º)
            pushups = get_pushups_today(user_id)
            if pushups >= 100:
                continue
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await application.bot.send_message(
                chat_id=chat_id,
                text="–≠–π! –¢—ã –Ω–µ –∑–∞–±—ã–ª –ø—Ä–æ —á–µ–ª–ª–µ–Ω–¥–∂? –û—Ç–æ–∂–º–∏—Å—å! üí™",
                reply_markup=get_main_keyboard()
            )
        # –°–ø–∏–º –¥–æ –ø–æ–ª—É–Ω–æ—á–∏
        tomorrow = datetime.combine(now.date() + timedelta(days=1), dt_time(0,0))
        await asyncio.sleep((tomorrow - datetime.now()).total_seconds())

def start_reminders(application, user_id, chat_id):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–¥–∞—á–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –æ—Ç–º–µ–Ω—è–µ–º
    old_task = reminder_tasks.get(user_id)
    if old_task:
        old_task.cancel()
    task = asyncio.create_task(send_reminders_loop(application, user_id, chat_id))
    reminder_tasks[user_id] = task

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    user_db = get_user(user.id)
    if user_db:
        await update.message.reply_text(
            "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏ /reset, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    await update.message.reply_text("–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? üìù")
    return ASK_NAME

async def ask_start_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["name"] = update.message.text
    await update.message.reply_text(
        "–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ê–°–´:–ú–ò–ù–£–¢–´ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:00), –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å (–Ω–∞—á–∞–ª–æ –¥–Ω—è) –∏ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –æ—Ç–∂–∏–º–∞–Ω–∏—èüïí"
    )
    return ASK_START_TIME

async def ask_end_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    time_text = update.message.text.strip()
    if not is_valid_time(time_text):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:00)"
        )
        return ASK_START_TIME
    context.user_data["start_time"] = time_text
    await update.message.reply_text(
        "–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ê–°–´:–ú–ò–ù–£–¢–´ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00), –∫–æ–≥–¥–∞ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É (–∫–æ–Ω–µ—Ü –¥–Ω—è) üïí –∏ —Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å"
    )
    return ASK_END_TIME

async def ask_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    time_text = update.message.text.strip()
    if not is_valid_time(time_text):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00)"
        )
        return ASK_END_TIME

    start_time = context.user_data.get("start_time")
    end_time = time_text

    if time_to_minutes(end_time) <= time_to_minutes(start_time):
        await update.message.reply_text(
            "–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –¥–Ω—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –¥–Ω—è!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00), –∫–æ–≥–¥–∞ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É (–∫–æ–Ω–µ—Ü –¥–Ω—è)"
        )
        return ASK_END_TIME

    context.user_data["end_time"] = end_time
    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø—Ä–æ –æ—Ç–∂–∏–º–∞–Ω–∏—è? –ú–∏–Ω–∏–º—É–º 2, –º–∞–∫—Å–∏–º—É–º 10 üîî"
    )
    return ASK_REMINDERS

async def save_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        reminders = int(update.message.text)
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–æ—Ç 2 –¥–æ 10)\n–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø—Ä–æ –æ—Ç–∂–∏–º–∞–Ω–∏—è? –ú–∏–Ω–∏–º—É–º 2, –º–∞–∫—Å–∏–º—É–º 10 üîî"
        )
        return ASK_REMINDERS
    if reminders < 2 or reminders > 10:
        await update.message.reply_text(
            "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 10\n–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø—Ä–æ –æ—Ç–∂–∏–º–∞–Ω–∏—è? –ú–∏–Ω–∏–º—É–º 2, –º–∞–∫—Å–∏–º—É–º 10 üîî"
        )
        return ASK_REMINDERS
    context.user_data["reminders"] = reminders
    user = update.effective_user
    user_name = context.user_data.get("name", "–¥—Ä—É–≥")

    add_user(
        user.id,
        context.user_data["name"],
        context.user_data["start_time"],
        context.user_data["end_time"],
        context.user_data["reminders"]
    )

    await update.message.reply_text(
        f"{DEVIL} –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ Devil's 100 challenge, *{user_name}*! –°–µ–≥–æ–¥–Ω—è –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —á–µ–ª–ª–µ–Ω–¥–∂–∞, –∞ –∑–Ω–∞—á–∏—Ç —Ç—ã –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–µ 100 –æ—Ç–∂–∏–º–∞–Ω–∏–π! –£–¥–∞—á–∏! {CLOVER}",
        reply_markup=get_main_keyboard(),
        parse_mode="Markdown"
    )
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏!
    start_reminders(context.application, user.id, update.effective_chat.id)
    await status(update, context)
    return ConversationHandler.END

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    reset_user(user.id)
    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏
    old_task = reminder_tasks.get(user.id)
    if old_task:
        old_task.cancel()
        reminder_tasks.pop(user.id)
    await update.message.reply_text(
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã! –ú–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.",
        reply_markup=ReplyKeyboardRemove()
    )

def parse_pushup_command(text):
    mapping = {
        "üéØ +10 –æ—Ç–∂–∏–º–∞–Ω–∏–π": 10,
        "üéØ +15 –æ—Ç–∂–∏–º–∞–Ω–∏–π": 15,
        "üéØ +20 –æ—Ç–∂–∏–º–∞–Ω–∏–π": 20,
        "üéØ +25 –æ—Ç–∂–∏–º–∞–Ω–∏–π": 25
    }
    return mapping.get(text.strip(), None)

async def add_pushups_generic(update, context, count):
    user = update.effective_user
    user_db = get_user(user.id)
    if not user_db:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start", reply_markup=get_main_keyboard())
        return

    user_name = user_db["username"] or user_db["name"] or "–¥—Ä—É–≥"
    cur = user_db["pushups_today"]

    if cur >= 100:
        await update.message.reply_text(
            "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 100 –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å!",
            reply_markup=get_main_keyboard()
        )
        return

    ok = add_pushups(user.id, count)
    new_count = get_pushups_today(user.id)

    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ! {emoji_number(count)} –æ—Ç–∂–∏–º–∞–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å—É {UP}",
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )
    await update.message.reply_text(
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {emoji_number(new_count)}",
        reply_markup=get_main_keyboard()
    )
    if new_count >= 100 and cur < 100:
        await update.message.reply_text(
            f"–Æ—Ö—É! *{user_name}*, —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å–æ—Ç–∫–∞ —Å–¥–µ–ª–∞–Ω–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! {STRONG} üíØ",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )

async def add_custom(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["awaiting_custom"] = True
    await update.message.reply_text("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –æ—Ç–∂–∏–º–∞–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13):", reply_markup=get_main_keyboard())

async def handle_custom_pushups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    count = parse_pushup_command(text)
    if count is not None:
        await add_pushups_generic(update, context, count)
        return
    if text == "üé≤ –î—Ä—É–≥–æ–µ —á–∏—Å–ª–æ":
        await add_custom(update, context)
        return
    if text == "üèÖ –ú–æ–π —Å—Ç–∞—Ç—É—Å":
        await status(update, context)
        return
    if context.user_data.get("awaiting_custom"):
        try:
            count = int(text)
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.", reply_markup=get_main_keyboard())
            return
        await add_pushups_generic(update, context, count)
        context.user_data["awaiting_custom"] = False

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    u = get_user(user.id)
    if not u:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start", reply_markup=get_main_keyboard())
        return
    day = u["day"]
    fails = u["fails"]
    pushups = u["pushups_today"]

    bar_days = days_bar(day, 90, 5, "üü™", "‚¨úÔ∏è")
    bar_pushups = progress_bar(pushups, 100, 5, "üü©", "‚¨úÔ∏è")
    msg = (
        f"DAY: {emoji_number(day)} {bar_days}\n\n"
        f"PROGRESS: {emoji_number(pushups)} {bar_pushups}\n\n"
        f"HEALTH: {hearts(fails)}"
    )
    await update.message.reply_text(msg, reply_markup=get_main_keyboard())

async def check_end_of_day(user_id, update):
    u = get_user(user_id)
    user_name = u["username"] or u["name"] or "–¥—Ä—É–≥"
    if u and u["pushups_today"] < 100:
        fails = fail_day(user_id)
        if fails < 3:
            await update.message.reply_text(
                f"–ü–∞-–ø–∞-–ø–∞‚Ä¶ *{user_name}*, —Å–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–µ –æ—Å–∏–ª–∏–ª —Å–æ—Ç–∫—É. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ –º–∏–Ω—É—Å –∂–∏–∑–Ω—å. –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ: {hearts(fails)}",
                parse_mode="Markdown",
                reply_markup=get_main_keyboard()
            )
        else:
            await update.message.reply_text(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –∑–∞—Ñ–µ–π–ª–∏–ª —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑! {SKULL}\n–î–ª—è —Ç–µ–±—è, *{user_name}*, Devil's 100 challenge –∑–∞–∫–æ–Ω—á–µ–Ω‚Ä¶ –≤ —ç—Ç–æ—Ç —Ä–∞–∑!\n–î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏ /reset",
                reply_markup=ReplyKeyboardRemove(),
                parse_mode="Markdown"
            )

async def addday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    u = get_user(user.id)
    user_name = u["username"] or u["name"] or "–¥—Ä—É–≥"
    if not u:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start", reply_markup=get_main_keyboard())
        return
    if u["pushups_today"] < 100:
        await check_end_of_day(user.id, update)
    else:
        next_day(user.id)
        await update.message.reply_text(
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, *{user_name}*, —Ç—ã –º–æ–ª–æ–¥–µ—Ü! –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å–æ—Ç–∫–∞ —Å–¥–µ–ª–∞–Ω–∞, —É–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞! {STRONG}",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )
    await status(update, context)

async def on_startup(application: Application):
    # –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ run_async!)
    for user_id in get_all_user_ids():
        user = get_user(user_id)
        if user:
            chat_id = user_id
            start_reminders(application, user_id, chat_id)

# === –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è /add10 –∏ —Ç.–¥. ===
async def add10(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await add_pushups_generic(update, context, 10)

async def add15(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await add_pushups_generic(update, context, 15)

async def add20(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await add_pushups_generic(update, context, 20)

async def add25(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await add_pushups_generic(update, context, 25)

def main():
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_start_time)],
            ASK_START_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_end_time)],
            ASK_END_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_reminders)],
            ASK_REMINDERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_reminders)],
        },
        fallbacks=[CommandHandler("start", start), CommandHandler("reset", reset)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("addday", addday))
    application.add_handler(CommandHandler("add10", add10))
    application.add_handler(CommandHandler("add15", add15))
    application.add_handler(CommandHandler("add20", add20))
    application.add_handler(CommandHandler("add25", add25))
    application.add_handler(CommandHandler("add", add_custom))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_pushups))

    logger.info("Bot started!")
    application.post_init = on_startup  # –∑–∞–ø—É—Å–∫–∞–µ–º on_startup –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    application.run_polling()

if __name__ == "__main__":
    main()
