import logging
import os
from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
)
from db import (
    init_db, add_user, get_user, reset_user, add_pushups,
    get_pushups_today, next_day, fail_day, get_fails, get_day
)

# States
CHOOSING_NAME, CHOOSING_START_TIME, CHOOSING_END_TIME, CHOOSING_REMINDERS = range(4)

DEVIL = "üòà"
CLOVER = "üçÄ"
HEART_RED = "‚ù§Ô∏è"
HEART_BLACK = "üñ§"
STRONG = "üí™"
REMIND = "üîî"
NOTE = "üìù"
CLOCK = "üïí"
TROPHY = "üèÜ"
CHILL = "üßò"
SKULL = "üíÄ"
ROAD = "üõ£Ô∏è"

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

init_db()

def progress_bar(val, total, length, char="‚ñá", empty="‚Äî"):
    filled = int(round(length * val / float(total)))
    return char * filled + empty * (length - filled)

def emoji_number(num):
    # –¢–æ–ª—å–∫–æ –¥–ª—è 1‚Äì9, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã
    emoji_digits = {
        '0': '0Ô∏è‚É£', '1': '1Ô∏è‚É£', '2': '2Ô∏è‚É£', '3': '3Ô∏è‚É£', '4': '4Ô∏è‚É£',
        '5': '5Ô∏è‚É£', '6': '6Ô∏è‚É£', '7': '7Ô∏è‚É£', '8': '8Ô∏è‚É£', '9': '9Ô∏è‚É£'
    }
    return ''.join(emoji_digits.get(d, d) for d in str(num))

def hearts(fails):
    return (HEART_RED * (3 - fails)) + (HEART_BLACK * fails)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    u = get_user(user.id)
    if not u:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return
    day = u["day"]
    fails = u["fails"]
    pushups = u["pushups_today"]
    # –ë–∞—Ä—ã
    bar_days = progress_bar(day, 90, 3)
    bar_pushups = progress_bar(pushups, 100, 5)
    msg = (
        f"DAY: {emoji_number(day)}/90 {bar_days}\n"
        f"PROGRESS: {emoji_number(pushups)}/100 {bar_pushups}\n"
        f"HEALTH: {hearts(fails)}\n"
    )
    keyboard = [
        [KeyboardButton("/add10"), KeyboardButton("/add15")],
        [KeyboardButton("/add20"), KeyboardButton("/add25")],
        [KeyboardButton("/add")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(msg, reply_markup=reply_markup)

async def check_end_of_day(user_id, update):
    u = get_user(user_id)
    if u and u["pushups_today"] < 100:
        fails = fail_day(user_id)
        if fails < 3:
            await update.message.reply_text(
                f"–ü–∞-–ø–∞-–ø–∞‚Ä¶ –°–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–µ –æ—Å–∏–ª–∏–ª —Å–æ—Ç–∫—É. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ –º–∏–Ω—É—Å –∂–∏–∑–Ω—å. –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ: {hearts(fails)}"
            )
        else:
            await update.message.reply_text(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –∑–∞—Ñ–µ–π–ª–∏–ª —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑! {SKULL}\n–î–ª—è —Ç–µ–±—è Devil's 100 challenge –∑–∞–∫–æ–Ω—á–µ–Ω‚Ä¶ –≤ —ç—Ç–æ—Ç —Ä–∞–∑!\n–ü–æ—ç—Ç–æ–º—É, –Ω–∞–ø–∏—Å–∞–≤ /reset —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –≤—Å—ë —Å–Ω–∞—á–∞–ª–∞! {ROAD}",
                reply_markup=ReplyKeyboardRemove()
            )

async def addday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    u = get_user(user.id)
    if not u:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return
    if u["pushups_today"] < 100:
        await check_end_of_day(user.id, update)
    else:
        next_day(user.id)
        await update.message.reply_text(
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –º–æ–ª–æ–¥–µ—Ü! –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å–æ—Ç–∫–∞ —Å–¥–µ–ª–∞–Ω–∞, —É–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞! {STRONG}"
        )
    await status(update, context)

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (start, reset, add10/15/20/25, add –∏ —Ç.–¥.) –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ –±—ã–ª –≤—ã—à–µ

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –∫–∞–∫ –±—ã–ª –≤—ã—à–µ)
    user = update.effective_user
    user_db = get_user(user.id)
    if user_db:
        await update.message.reply_text(
            f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏ /reset, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    keyboard = [[KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Devil's 100!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
        reply_markup=reply_markup,
    )
    return CHOOSING_NAME

# ... (–û—Å—Ç–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∂–∏–º–∞–Ω–∏–π –∫–∞–∫ –≤—ã—à–µ)

def main():
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("üöÄ –ù–∞—á–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂"), choose_name),
        ],
        states={
            CHOOSING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_name)],
            CHOOSING_START_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_start_time)],
            CHOOSING_END_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_end_time)],
            CHOOSING_REMINDERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_reminders)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("addday", addday))
    application.add_handler(CommandHandler("add10", add10))
    application.add_handler(CommandHandler("add15", add15))
    application.add_handler(CommandHandler("add20", add20))
    application.add_handler(CommandHandler("add25", add25))
    application.add_handler(CommandHandler("add", add_custom))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_pushups))

    logger.info("Bot started!")
    application.run_polling()

if __name__ == "__main__":
    main()
